<script>if($('notice'))$('notice').remove();if($('notice_err'))$('notice_err').remove();</script>
<div id='show_desc' align="center" class="list" onclick="Effect.SlideUp('show_desc')" style="padding-bottom:20px;">
	<table style="text-align:left;">
	  <% odd_or_even =1
		current_list = ["id"].concat(session[:cn_section_list].map{|item| item.gsub(/^\d+_/, "")})
		prepare_for_struct = [] %>
		<tr><td colspan=6 style="text-align:center; background-color:#000099; color:white; font-size:120%;"><strong>单词详细内容</strong></td></tr>
		<tr>
			<% real_td = 0
			for index in 0..current_list.size-1 do
				item = current_list[index]
				real_td += 1
				if (real_td-1) % 3 == 0
					odd_or_even = 1 - odd_or_even %>
					</tr>
					<tr <%= "class='odd'" if odd_or_even == 0 %> >
				<% end
				if not initial_property_name('cn')[item].blank? %>
					<th style="width:70px;"><%= item=="sth_tagging_state" ? "内部结构"+initial_property_name('cn')[item] : initial_property_name('cn')[item] %></th>
					<% case item
					when "id", "surface", "reading", "log" %>
						<td><%= h(show_desc[item]) %></td>
					<% when "pos", "tagging_state" %>
						<td><%= h(eval('show_desc.'+item+'_item.tree_string')) unless show_desc[item].blank? or show_desc[item] == 0 %></td>
					<% when "created_by", "modified_by" %>
						<td><%= User.find(show_desc[item].to_i).name unless show_desc[item].blank? %></td>
					<% when "updated_at" %>
						<td><%= show_desc.updated_at.to_formatted_s(:db) unless show_desc.updated_at.blank? %></td>
					<% when "dictionary" %>
						<td style="text-align:center;" >
							<% temp = []
							show_desc.dictionary_item.list.each{|dict| temp << "<span style='background-color:#{dictionary_color[dict.to_i]};'>&nbsp;&nbsp;</span>" } %>
							<%= temp.join("  ") %>
						</td>
					<% when "sth_struct" %>
						<td style="text-align:center;" >
							<% unless show_desc.struct.blank? %>
								<span style='background-color:#047;'>&nbsp;&nbsp;</span>
							<% end %>
						</td>
					<% when "sth_tagging_state" %>
						<td><%= h(show_desc.struct.sth_tagging_state_item.tree_string) unless show_desc.struct.blank? %></td>
					<% end
				elsif ["sth_log", "sth_modified_by", "sth_updated_at"].include?(item) %>
					<th style="width:70px;">内部结构<%= initial_property_name('cn')[item.gsub("sth_", "")] %></th>
					<% case item
					when "sth_log" %>
						<td><%= show_desc.struct.log unless show_desc.struct.blank? %></td>
					<% when "sth_modified_by" %>
						<td><%= show_desc.struct.annotator.name unless show_desc.struct.blank? %></td>
					<% when "sth_updated_at" %>
						<td><%= show_desc.struct.updated_at.to_formatted_s(:db) unless show_desc.struct.blank? %></td>
					<% end
				else
					property = CnNewProperty.find(:first, :conditions=>["property_string='#{item}'"]) 
					case property.section
					when 'lexeme' %>
						<th style="width:70px;"><%= CnNewProperty.find(:first, :conditions=>["property_string='#{item}'"]).human_name %></th>
						<% temp = eval 'show_desc.'+item
						if temp.blank? %>
							<td></td>
						<% else
							case property.type_field
							when "category" %>
								<td><%= h(CnProperty.find(:first, :conditions=>["property_string='#{item}' and property_cat_id=#{temp}"]).tree_string) %></td>
							<% when "text" %>
								<td><%= h(temp) %></td>
							<% when "time" %>
								<td><%= h(temp.to_formatted_s(:db)) %></td>
							<% end
						end
					when 'synthetic'
						prepare_for_struct << property
						real_td -= 1
					end
				end
			end
			if real_td%3 != 0
				(3-real_td%3).times{|index| %>
					<th></th><td></td>
				<% }
			end %>
		</tr>
		<% if current_list.include?('sth_struct') and not show_desc.struct.blank?
			show_desc.sub_structs.sort{|a,b| a.sth_meta_id<=>b.sth_meta_id}.each{|sub_structure|
		    odd_or_even =1 %>
				<tr><td colspan=6 style="text-align:center; background-color:#000099; color:white; font-size:120%;"><strong>内部结构:<%= sub_structure.sth_surface %></strong></td></tr>
				<tr class='odd'>
					<th>结构</th>
					<td colspan=5><%= sub_structure.get_display_string %></td>
				</tr>
				<% remain_fields = []
				prepare_for_struct.each{|item| remain_fields << item if session[:cn_dict_id].include?(item.dictionary_id) and current_list.include?(item.property_string)}
				unless remain_fields.blank? %>
					<tr>
						<% remain_fields.each_with_index{|item, index|
							if index % 3 == 0 and index != 0
								odd_or_even = 1 - odd_or_even %>
								</tr><tr <%= "class='odd'" if odd_or_even == 0 %> >
							<% end %>
							<th><%= item.human_name %></th>
							<td>
								<% unless eval('sub_structure.'+item.property_string).blank? %>
									<% case item.type_field
									when 'category' %>
										<%= CnProperty.find(:first, :conditions=>["property_string=? and property_cat_id=?", item.property_string, eval('sub_structure.'+item.property_string)]).tree_string %>
									<% when 'text' %>
										<%= eval('sub_structure.'+item.property_string) %>
									<% when 'time' %>
										<%= eval('sub_structure.'+item.property_string).to_formatted_s(:db) %>
									<% end
								end %>
							</td>
						<% }
						(3-remain_fields.size%3).times{|index| %>
							<th></th><td></td>
						<% } %>
					</tr>
				<% end
			}
		end %>
	</table>
</div>